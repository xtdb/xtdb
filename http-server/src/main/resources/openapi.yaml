openapi: 3.0.1
info:
  title: XTDB
  version: 2.0.0-SNAPSHOT
servers:
  - url: /
components:
  schemas:
    # Please keep this sorted
    AuthOpts:
      description: Authentication options
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    ArgRows:
      description: rows to be passed to a prepared SQL statement
      type: array
      items:
        type: array
        items:
          $ref: '#/components/schemas/TypedAny'

    DefaultTz:
      type: string
      example: "America/Los_Angeles"

    Document:
      description: Document
      type: object
      properties:
        _id:
          $ref: '#/components/schemas/Id'
      additionalProperties:
        $ref: '#/components/schemas/TypedAny'
      example:
        $ref: '#/components/examples/DocumentLargeExample'

    Duration:
      description: Duration (ISO8601)
      type: string

    Error:
      type: object
      properties:
        xtdb.error/error-type:
          type: string
          example: "illegal-argument"
        xtdb.error/error-key:
          type: string
          example: "xtql/malformed-table"
        message:
          type: string
          example: "Illegal argument: ':xtql/malformed-table'"

    Id:
      description: entity id
      oneOf:
        - $ref: '#/components/schemas/UUID'
        - type: string
        - type: integer
        - $ref: '#/components/schemas/TypedKeyword'

    Instant:
      type: string
      example: "2024-01-01T00:00:00Z"
      format: date-time

    QueryOpts:
      description: |
        Options for a XTQL or SQL query
        
        Please also see [XTQL options](https://docs.xtdb.com/reference/main/xtql/queries.html#_query_options)
      type: object
      properties:
        args:
          description: a map of arguments to pass to the query.
          oneOf:
            - type: array
              items:
                $ref: '#/components/schemas/TypedAny'
            - type: object
              additionalProperties:
                $ref: '#/components/schemas/TypedAny'
        afterTx:
          description: requires that the node has indexed at least the specified transaction.
          $ref: '#/components/schemas/TransactionKey'
          nullable: true
        atTx:
          description: TransactionKey reference returned by any prior request to `/tx`, ensures that the node has indexed at least the specified transaction
          $ref: '#/components/schemas/TransactionKey'
        currentTime:
          description: wall clock time for functions that require it (i.e. `CURRENT_TIMESTAMP`)
          $ref: '#/components/schemas/Instant'
        defaultTz:
          description: the default timezone to use in functions that require it.
          $ref: '#/components/schemas/DefaultTz'
        explain:
          description: rather than returning results, setting this flag to true returns the query plan for the query
          type: boolean
        keyFn:
          description: specifies how keys are returned in query results.
          type: string
          enum:
            - "CAMEL_CASE_STRING"
            - "SNAKE_CASE_STRING"
            - "KEBAB_CASE_STRING"
        txTimeout:
          description: duration to wait for the requested transactions (atTx, afterTx) to be indexed before timing out (default unlimited).
          $ref: '#/components/schemas/Duration'
        authOpts:
          $ref: '#/components/schemas/AuthOpts'

    SqlOp:
      description: sql transaction operation
      type: object
      properties:
        sql:
          type: string
          description: A SQL operation
          example: "INSERT INTO docs(_id, name) VALUES (1, 'Turing')"
        argRows:
          $ref: '#/components/schemas/ArgRows'

    SqlQuery:
      description: |
        SQL query request.

        See [SQL queries](https://docs.xtdb.com/reference/main/sql/queries) for details about SQL queries.
      required:
        - query
      type: object
      properties:
        sql:
          type: string
        queryOpts:
          $ref: '#/components/schemas/QueryOpts'

    TransactionKey:
      type: object
      properties:
        txId:
          type: integer
        systemTime:
          $ref: '#/components/schemas/Instant'

    TxOp:
      description: transaction operations
      oneOf:
        - $ref: '#/components/schemas/SqlOp'
        - $ref: '#/components/schemas/XtqlOp'

    TxOptions:
      description: transaction options
      properties:
        systemTime:
          $ref: '#/components/schemas/Instant'
        defaultTz:
          $ref: '#/components/schemas/DefaultTz'
        authOpts:
          $ref: '#/components/schemas/AuthOpts'

    TxRequest:
      type: object
      required:
        - txOps
      properties:
        txOps:
          type: array
          items:
            $ref: '#/components/schemas/TxOp'
        opts:
          $ref: '#/components/schemas/TxOptions'

    TypedAny:
      description: |
        JSON-LD object

        Due to the inherent limitations in the native type system of JSON, our implementation leverages the JSON-LD
        format to encode a broader range of types. This approach primarily involves two key components:
        
        - '@type' Property: This field specifies the object's type, offering a clear description of the nature of the data being represented.
        - '@value' Property: This field is used to encapsulate the actual data corresponding to the type described in the @type property.
        
        By integrating these elements, JSON-LD enables a more flexible and descriptive representation of
        data types beyond the standard capabilities of JSON.
      oneOf:
        - type: string
        - type: integer
        - $ref: '#/components/schemas/TypedDuration'
        - $ref: '#/components/schemas/TypedInstant'
        - $ref: '#/components/schemas/TypedKeyword'
        - $ref: '#/components/schemas/TypedLocalDate'
        - $ref: '#/components/schemas/TypedLocalDateTime'
        - $ref: '#/components/schemas/TypedPeriod'
        - $ref: '#/components/schemas/TypedSet'
        - $ref: '#/components/schemas/TypedSymbol'
        - $ref: '#/components/schemas/TypedTimeZone'
        - $ref: '#/components/schemas/TypedZoneDateTime'
        - type: object
          description: a nested map
          additionalProperties:
            $ref: '#/components/schemas/TypedAny'
        - type: array
          description: an array/list type of XT
          items:
            $ref: '#/components/schemas/TypedAny'

    TypedDuration:
      description: A time-based amount of time, such as '34.5 seconds'.
      type: object
      properties:
        '@type':
          type: string
          const: xt:duration
        '@value':
          type: string
          example: "PT3H1M35.23S"

    TypedInstant:
      description: An instantaneous point on the time-line. An object where a simple string would be ambiguous.
      type: object
      properties:
        '@type':
          type: string
          const: xt:instant
        '@value':
          type: string
          example: "2024-01-01T00:00Z"
          format: date-time

    TypedKeyword:
      description: a keyword literal - See [Keyword](https://clojure.org/reference/data_structures#Keywords) for details.
      type: object
      properties:
        '@type':
          type: string
          const: xt:keyword
        '@value':
          type: string

    TypedLocalDate:
      description: A date without a time-zone in the ISO-8601 calendar system, such as 2007-12-03
      properties:
        '@type':
          type: string
          const: xt:date
        '@value':
          type: string
          example: "2024-01-01"
          format: date

    TypedLocalDateTime:
      description: A date-time without a time-zone in the ISO-8601 calendar system, such as 2007-12-03T10:15:30.
      properties:
        '@type':
          type: string
          const: xt:timestamp
        '@value':
          type: string
          example: "2020-01-01T12:34:56.789"

    TypedPeriod:
      description: A date-based amount of time in the ISO-8601 calendar system, such as '2 years, 3 months and 4 days'.
      properties:
        '@type':
          type: string
          const: xt:period
        '@value':
          type: string
          example: "P18Y12D"

    TypedSet:
      description: A set data literal.
      type: object
      properties:
        '@type':
          type: string
          const: xt:set
        '@value':
          type: array
          items:
            $ref: '#/components/schemas/TypedAny'

    TypedSymbol:
      description: A symbol literal - See [Symbol](https://clojure.org/reference/data_structures#Symbols) for details.
      type: object
      properties:
        '@type':
          type: string
          const: xt:symbol
        '@value':
          type: string

    TypedTimeZone:
      description: A time-zone ID, such as Europe/Paris.
      type: object
      properties:
        '@type':
          type: string
          const: xt:timeZone
        '@value':
          type: string
          example: "America/Los_Angeles"

    TypedZoneDateTime:
      description: A date-time with a time-zone in the ISO-8601 calendar system, such as 2007-12-03T10:15:30+01:00 Europe/Paris.
      type: object
      properties:
        '@type':
          type: string
          const: xt:timestamptz
        '@value':
          type: string
          example: "2020-01-01T12:34:56.789[Europe/Paris]"

    UUID:
      type: string
      format: uuid

    XtqlQuery:
      description: |
        See [XTQL queries](https://docs.xtdb.com/reference/main/xtql/queries) for details.
      required:
        - query
      type: object
      properties:
        query:
          description: |
            Not available in JSON

            In Transit: a Transit-encoded XTQL query
        queryOpts:
          $ref: '#/components/schemas/QueryOpts'

    XtqlOp:
      type: array
      description: |
        XTQL transaction operation
        See [XTQL transactions](https://docs.xtdb.com/reference/main/xtql/transactions) for details.

        Not available in JSON.

  examples:
    DocumentLargeExample:
      _id: "my-id"
      an-integer: 12
      my-duration:
        '@type': "xt:duration"
        '@value': "PT3H1M35.23S"
      my-instant:
        '@type': "xt:instant"
        '@value': "2024-01-01T00:00:00Z"
      my-local-date:
        '@type': "xt:date"
        '@value': "2024-01-01"
      my-local-date-time:
        '@type': "xt:timestamp"
        '@value': "2020-01-01T12:34:56.789"
      my-period:
        '@type': "xt:period"
        '@value': "P18Y12D"
      my-set:
        '@type': "xt:set"
        '@value': [1, 2, 3]
      my-time-zone:
        '@type': "xt:timeZone"
        '@value': "America/Los_Angeles"
      my-zoned-date-time:
        '@type': "xt:timestamptz"
        '@value': "2020-01-01T12:34:56.789[Europe/Paris]"

paths:
  /tx:
    post:
      summary: Transaction
      description: |
        Submits a transaction to the cluster. 
        
        See [XTQL Transactions](https://docs.xtdb.com/reference/main/xtql/txs) for details about different XT transaction operations. 
        
        See [SQL Transactions](https://docs.xtdb.com/reference/main/sql/txs) for details about different SQL transaction operations.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TxRequest'
        required: true
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionKey'
        400:
          description: A validation error, parsing error or runtime error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error. An unknown error occurred server side.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /query:
    post:
      summary: Query
      description: |
        Submits a query to the cluster.
        
        See [XTQL queries](https://docs.xtdb.com/reference/main/xtql/queries) for details about how to construct queries.
        
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/SqlQuery'
                - $ref: '#/components/schemas/XtqlQuery'
        required: true
      responses:
        200:
          description: Ok
          content:
            application/jsonl:
              schema:
                $ref: '#/components/schemas/Document'
        400:
          description: A validation error, parsing error or runtime error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error. An unknown error occurred server side.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
