name: Nightly Benchmark TPC-H

on:
  workflow_dispatch:
    inputs:
      scale_factor:
        description: 'TPC-H Scale Factor'
        required: false
        default: '0.5'
        type: string
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight UTC

permissions:
  id-token: write
  contents: read

concurrency:
  group: nightly-benchmark-tpch
  cancel-in-progress: false

jobs:
  benchmark:
    name: Run Nightly Benchmark TPC-H
    runs-on: ubuntu-latest
    timeout-minutes: 90
    env:
      SCALE_FACTOR: ${{ inputs.scale_factor || '0.5' }}
      GRAFANA_ADMIN_PASSWORD: ${{ secrets.BENCHMARK_GRAFANA_ADMIN_PASSWORD }}

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Azure CLI Login
        uses: azure/login@a457da9ea143d694b1b9c7c869ebb04ebe844ef5 # v2
        with:
          client-id: ${{ secrets.BENCHMARK_AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.BENCHMARK_AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.BENCHMARK_AZURE_SUBSCRIPTION_ID }}

      - name: Acquire Kubernetes Configuration
        run: |
          az aks get-credentials --resource-group cloud-benchmark-resources --name xtdb-bench-cluster

      - name: Check Existing Deployment
        id: check-deployment
        continue-on-error: true
        run: |
          # exit 0 if exists, non-zero if not
          helm status xtdb-benchmark -n cloud-benchmark >/dev/null 2>&1

      - name: Ensure Grafana password present
        if: steps.check-deployment.outcome != 'success'
        run: |
          set -euo pipefail
          if [ -z "${GRAFANA_ADMIN_PASSWORD:-}" ]; then
            echo "GRAFANA_ADMIN_PASSWORD is required but not set" >&2
            exit 1
          fi

      - name: Install Monitoring Stack
        if: steps.check-deployment.outcome != 'success'
        continue-on-error: true
        run: |
          bash ./modules/bench/cloud/monitoring/install-monitoring.sh

      - name: Create Bench Secret (GITHUB_PAT)
        if: steps.check-deployment.outcome != 'success'
        run: |
          set -euo pipefail
          kubectl -n cloud-benchmark create secret generic xtdb-bench-secrets \
            --from-literal=GITHUB_PAT="${{ secrets.BENCHMARK_GITHUB_PAT }}" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Run Benchmark
        if: steps.check-deployment.outcome != 'success'
        run: |
          helm dependency update ./modules/bench/cloud/helm
          helm upgrade --install "xtdb-benchmark" ./modules/bench/cloud/helm \
            --namespace "cloud-benchmark" \
            --create-namespace \
            -f ./modules/bench/cloud/azure/values.yaml \
            --set "benchType=tpch" \
            --set "tpch.scaleFactor=${{ env.SCALE_FACTOR }}" \
            --set "providerConfig.existingSecret=xtdb-bench-secrets" \
            --set "providerConfig.env.AZURE_USER_MANAGED_IDENTITY_CLIENT_ID=${{ secrets.BENCHMARK_AZURE_USER_MANAGED_IDENTITY_CLIENT_ID }}" \
            --set "providerConfig.serviceAccountAnnotations.azure\.workload\.identity/client-id=${{ secrets.BENCHMARK_AZURE_USER_MANAGED_IDENTITY_CLIENT_ID }}"

      - name: Compose Slack Message
        id: compose
        if: always()
        run: |
          if [ "${{ steps.check-deployment.outcome }}" = "success" ]; then
            echo 'msg=:information_source: TPC-H Benchmark skipped â€” existing deployment found' >> "$GITHUB_OUTPUT"
          else
            echo 'msg=TPC-H Benchmark (Scale Factor: ${{ env.SCALE_FACTOR }}) started' >> "$GITHUB_OUTPUT"
          fi

      - name: Post Slack Notification
        uses: ravsamhq/notify-slack-action@be814b201e233b2dc673608aa46e5447c8ab13f2 # v2
        if: always()
        with:
          status: ${{ job.status }}
          notification_title: "*TPC-H Benchmark*"
          message_format: "${{ steps.compose.outputs.msg }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.BENCHMARK_SLACK_WEBHOOK_URL }}

      - name: Fail if existing deployment
        if: steps.check-deployment.outcome == 'success'
        run: |
          echo "Failing workflow due to existing deployment"
          exit 1
